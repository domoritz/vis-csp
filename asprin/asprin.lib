#program preference.
required(P,better) :- optimize(P).
:- not better(P),  optimize(P).
required(A,B) :- required(A,B). % to avoid warnings

       
#program preference(and).

required(Q,better) :- preference(P,and), required(P,better), preference(P,_,_,name(Q),_).
better(P) :- preference(P,and), required(P,better); 
	            better(Q) : preference(P,_,_,name(Q),_).
            
required(P,better) :- preference(P,and), required(P,bettereq). 
required(P,eq)        :- preference(P,and), required(P,bettereq). 
bettereq(P) :- preference(P,and), required(P,bettereq),
                  1 #sum { 1: better(P); 1: eq(P) }.

required(Q,eq) :- preference(P,and), required(P,eq), preference(P,_,_,name(Q),_).
eq(P) :- preference(P,and), required(P,eq); 
	     eq(Q) : preference(P,_,_,name(Q),_).

required(P,worse) :- preference(P,and), required(P,worseeq). 
required(P,eq)    :- preference(P,and), required(P,worseeq). 
worseeq(P) :- preference(P,and), required(P,worseeq),
              1 #sum { 1: worse(P); 1: eq(P) }.

required(Q,worse) :- preference(P,and), required(P,worse), preference(P,_,_,name(Q),_).
worse(P) :- preference(P,and), required(P,worse); 
	        worse(Q) : preference(P,_,_,name(Q),_).

required(P,bettereq) :- preference(P,and), required(P,unc). 
required(P,worseeq)     :- preference(P,and), required(P,unc). 
unc(P) :- preference(P,and); required(P,unc); 
          not bettereq(P); not worseeq(P).

%%% no formulas
_error(M) :- M = @cat("and: In preference element ",N," of preference statement ",P,", only naming atoms are allowed."), 
             preference(P,and), 
             preference(P,(N,_),_,for(X),_).

%%% no weights
_error(M) :- M = @cat("and: In preference element ",N," of preference statement ",P,", weight '",W,"' appearing in '",W,"::",X,"' is not allowed."),
             preference(P,and), 
             preference(P,(N,_),_,X,W), W != ().

%%% no orders or conditions
_error(M) :- M = @cat("and: In preference element ",N," of preference statement ",P,", element '",X,"' is not allowed."),
             preference(P,and), 
             preference(P,(N,_),R,for(X),_), R != 1.


#program preference(aso).

required(P,aso) :- preference(P,aso), required(P,_).
preference(P,aso,Id) :- preference(P,aso), required(P,aso), preference(P,Id,_,_,_).

nohead(P,Id) :- preference(P,aso,Id), 
                not holds(X) : preference(P,Id,H,for(X),_), H!=0.

nohead'(P,Id) :- preference(P,aso,Id), 
                 not holds'(X) : preference(P,Id,H,for(X),_), H!=0.

value'(P,Id,V) :- preference(P,aso,Id),
                  V = #min { 1   : not holds'(X), preference(P,Id,0,for(X),_);
                             1   : nohead'(P,Id);
                             Pos : holds'(X), preference(P,Id,Pos,for(X),_), Pos != 0}.
 
better(P,Id) :- preference(P,aso,Id), value'(P,Id,V), required(P,aso,better), 
                   V > #min { 1   : not holds(X), preference(P,Id,0,for(X),_);
                              1   : nohead(P,Id);
                              Pos : holds(X), preference(P,Id,Pos,for(X),_), Pos != 0}.
 
bettereq(P,Id) :- preference(P,aso,Id), value'(P,Id,V), required(P,aso,bettereq),
                     V >= #min { 1   : not holds(X), preference(P,Id,0,for(X),_);
                                 1   : nohead(P,Id);
                                 Pos : holds(X), preference(P,Id,Pos,for(X),_), Pos != 0}.

required(P,aso,better)   :- preference(P,aso), required(P,better).                             
required(P,aso,bettereq) :- preference(P,aso), required(P,better).                             
better(P) :- preference(P,aso), required(P,better),
                bettereq(P,Id1) : preference(P,aso,Id1);
                better(P,Id2), preference(P,aso,Id2).

required(P,aso,bettereq) :- preference(P,aso), required(P,bettereq).                            
bettereq(P) :- preference(P,aso), required(P,bettereq),
                  bettereq(P,Id) : preference(P,aso,Id).

              
eq(P,Id) :- preference(P,aso,Id), value'(P,Id,V), required(P,aso,eq),
            V = #min { 1   : not holds(X), preference(P,Id,0,for(X),_);
                       1   : nohead(P,Id);
                       Pos : holds(X), preference(P,Id,Pos,for(X),_), Pos != 0}.
 
worseeq(P,Id) :- preference(P,aso,Id), value'(P,Id,V), required(P,aso,worseeq),
                 V <= #min { 1   : not holds(X), preference(P,Id,0,for(X),_);
                             1   : nohead(P,Id);
                             Pos : holds(X), preference(P,Id,Pos,for(X),_), Pos != 0}.
 
worse(P,Id) :- preference(P,aso,Id), value'(P,Id,V), required(P,aso,worse),
               V < #min { 1   : not holds(X), preference(P,Id,0,for(X),_);
                          1   : nohead(P,Id);
                          Pos : holds(X), preference(P,Id,Pos,for(X),_), Pos != 0}.

required(P,aso,eq) :- preference(P,aso), required(P,eq).                             
eq(P) :- preference(P,aso), required(P,eq),
         eq(P,Id) : preference(P,aso,Id).

required(P,aso,worseeq) :- preference(P,aso), required(P,worseeq).                             
worseeq(P) :- preference(P,aso), required(P,worseeq),
              worseeq(P,Id) : preference(P,aso,Id).

required(P,aso,worseeq) :- preference(P,aso), required(P,worse).                             
required(P,aso,worse)   :- preference(P,aso), required(P,worse).                             
worse(P) :- preference(P,aso), required(P,worse),
            worseeq(P,Id1) : preference(P,aso,Id1);
            worse(P,Id2); preference(P,aso,Id2).

required(P,bettereq) :- preference(P,aso), required(P,unc). 
required(P,worseeq)     :- preference(P,aso), required(P,unc). 
unc(P) :- preference(P,aso); required(P,unc); 
          not bettereq(P); not worseeq(P).


_error(M) :- M = @cat("aso: In preference element ",N," of preference statement ",P,", naming atom 'name(",X,")' is not allowed."), 
             preference(P,aso), 
             preference(P,(N,_),_,name(X),_).

_error(M) :- M = @cat("aso: In preference element ",N," of preference statement ",P,", weight '",W,"' appearing in weighted boolean formula '",W,"::",X,"' is not allowed."),
             preference(P,aso), 
             preference(P,(N,_),_,X,W), W != ().


#program preference(less(cardinality)).

better(P) :- preference(P,less(cardinality)), required(P,better),
                1 #sum { -1,X : holds(X),  preference(P,_,_,for(X),_); 
                          1,X : holds'(X), preference(P,_,_,for(X),_)}.

required(P,better) :- required(P,bettereq).
required(P,eq)        :- required(P,bettereq).
bettereq(P) :- preference(P,less(cardinality)), required(P,bettereq),
                  1 #sum { 1: eq(P); 1: better(P) }.

eq(P) :- preference(P,less(cardinality)), required(P,eq),
         0 #sum { -1,X : holds(X),  preference(P,_,_,for(X),_); 
                   1,X : holds'(X), preference(P,_,_,for(X),_)}0. 

required(P,worse) :- required(P,worseeq).
required(P,eq)    :- required(P,worseeq).
worseeq(P) :- preference(P,less(cardinality)), required(P,worseeq),
              1 #sum { 1: eq(P); 1: worse(P) }.

worse(P) :- preference(P,less(cardinality)), required(P,worse),
            #sum { -1,X : holds(X),  preference(P,_,_,for(X),_); 
                    1,X : holds'(X), preference(P,_,_,for(X),_)}-1.


_error(M) :- M = @cat("less(cardinality): In preference element ",N," of preference statement ",P,", naming atom 'name(",X,")' is not allowed."), 
             preference(P,less(cardinality)), 
             preference(P,(N,_),_,name(X),_).

_error(M) :- M = @cat("less(cardinality): In preference element ",N," of preference statement ",P,", weight '",W,"' appearing in weighted boolean formula '",W,"::",X,"' is not allowed."),
             preference(P,less(cardinality)), 
             preference(P,(N,_),_,X,W), W != ().

_error(M) :- M = @cat("less(cardinality): In preference element ",N," of preference statement ",P,", element '",X,"' is not allowed."),
             preference(P,less(cardinality)), 
             preference(P,(N,_),R,for(X),_), R != 1.


#program preference(less(weight)).

better(P) :- preference(P,less(weight)), required(P,better),
                1 #sum { -W,T : holds(X),  preference(P,_,_,for(X),(W,T)); 
                          W,T : holds'(X), preference(P,_,_,for(X),(W,T))}.

bettereq(P) :- preference(P,less(weight)), required(P,bettereq),
                  0 #sum { -W,T : holds(X),  preference(P,_,_,for(X),(W,T)); 
                            W,T : holds'(X), preference(P,_,_,for(X),(W,T))}. 

eq(P) :- preference(P,less(weight)), required(P,eq),
         0 #sum { -W,T : holds(X),  preference(P,_,_,for(X),(W,T)); 
                   W,T : holds'(X), preference(P,_,_,for(X),(W,T))}0. 

worseeq(P) :- preference(P,less(weight)), required(P,worseeq),
              #sum { -W,T : holds(X),  preference(P,_,_,for(X),(W,T)); 
                      W,T : holds'(X), preference(P,_,_,for(X),(W,T))}0.

worse(P) :- preference(P,less(weight)), required(P,worse),
            #sum { -W,T : holds(X),  preference(P,_,_,for(X),(W,T)); 
                    W,T : holds'(X), preference(P,_,_,for(X),(W,T))}-1.

_error(M) :- M = @cat("less(weight): In preference element ",N," of preference statement ",P,", naming atom 'name(",X,")' is not allowed."), 
             preference(P,less(weight)), 
             preference(P,(N,_),_,name(X),_).

_error(M) :- M = @cat("less(weight): In preference element ",N," of preference statement ",P,", weight '",W,"' appearing in '",W,"::",X,"' should be a two terms tuple."),
             preference(P,less(weight)), 
             preference(P,(N,G),_,X,W), not ok(P,(N,G)).

ok(P,Q)   :- preference(P,less(weight)), 
             preference(P,Q,_,_,(A,B)).

_error(M) :- M = @cat("less(weight): In preference element ",N," of preference statement ",P,", element '",X,"' is not allowed."),
             preference(P,less(weight)), 
             preference(P,(N,_),R,for(X),_), R != 1.


#program preference(lexico).

required(Q,better) :- preference(P,lexico), required(P,better), preference(P,_,_,name(Q),_).
required(Q,eq)        :- preference(P,lexico), required(P,better), preference(P,_,_,name(Q),_).
better(P) :- preference(P,lexico), required(P,better),
                better(R); preference(P,_,_,name(R),(L));
	            eq(Q)      : preference(P,_,_,name(Q),(LL)), LL > L.

required(P,better) :- preference(P,lexico), required(P,bettereq). 
required(P,eq)        :- preference(P,lexico), required(P,bettereq). 
bettereq(P) :- preference(P,lexico), required(P,bettereq),
                  1 #sum { 1: better(P); 1: eq(P) }.

required(Q,eq) :- preference(P,lexico), required(P,eq), preference(P,_,_,name(Q),_).
eq(P) :- preference(P,lexico), required(P,eq),
         eq(Q) : preference(P,_,_,name(Q),_).

required(P,worse) :- preference(P,lexico), required(P,worseeq). 
required(P,eq)    :- preference(P,lexico), required(P,worseeq). 
worseeq(P) :- preference(P,lexico), required(P,worseeq),
              1 #sum { 1: worse(P); 1: eq(P) }.

required(Q,worse) :- preference(P,lexico), required(P,worse), preference(P,_,_,name(Q),_).
required(Q,eq)    :- preference(P,lexico), required(P,worse), preference(P,_,_,name(Q),_).
worse(P) :- preference(P,lexico), required(P,worse),
            worse(R); preference(P,_,_,name(R),(L));
	        eq(Q) : preference(P,_,_,name(Q),(LL)), LL > L.

required(P,bettereq) :- preference(P,lexico), required(P,unc). 
required(P,worseeq)     :- preference(P,lexico), required(P,unc). 
unc(P) :- preference(P,lexico); required(P,unc); 
          not bettereq(P); not worseeq(P).

%%% no formulas
_error(M) :- M = @cat("lexico: In preference element ",N," of preference statement ",P,", only naming atoms are allowed."), 
             preference(P,lexico), 
             preference(P,(N,_),_,for(X),_).

%%% weights allowed

%%% no orders or conditions
_error(M) :- M = @cat("lexico: In preference element ",N," of preference statement ",P,", element '",X,"' is not allowed."),
             preference(P,lexico), 
             preference(P,(N,_),R,for(X),_), R != 1.

#program preference(more(cardinality)).

better(P) :- preference(P,more(cardinality)), required(P,better),
                #sum { -1,X : holds(X),  preference(P,_,_,for(X),_); 
                        1,X : holds'(X), preference(P,_,_,for(X),_)}-1.

required(P,better) :- required(P,bettereq).
required(P,eq)        :- required(P,bettereq).
bettereq(P) :- preference(P,more(cardinality)), required(P,bettereq),
                  1 #sum { 1: eq(P); 1: better(P) }.

eq(P) :- preference(P,more(cardinality)), required(P,eq),
         0 #sum { -1,X : holds(X),  preference(P,_,_,for(X),_); 
                   1,X : holds'(X), preference(P,_,_,for(X),_)}0. 

required(P,worse) :- required(P,worseeq).
required(P,eq)    :- required(P,worseeq).
worseeq(P) :- preference(P,more(cardinality)), required(P,worseeq),
              1 #sum { 1: eq(P); 1: worse(P) }.

worse(P) :- preference(P,more(cardinality)), required(P,worse),
            1 #sum { -1,X : holds(X),  preference(P,_,_,for(X),_); 
                      1,X : holds'(X), preference(P,_,_,for(X),_)}.


_error(M) :- M = @cat("more(cardinality): In preference element ",N," of preference statement ",P,", naming atom 'name(",X,")' is not allowed."), 
             preference(P,more(cardinality)), 
             preference(P,(N,_),_,name(X),_).

_error(M) :- M = @cat("more(cardinality): In preference element ",N," of preference statement ",P,", weight '",W,"' appearing in weighted boolean formula '",W,"::",X,"' is not allowed."),
             preference(P,more(cardinality)), 
             preference(P,(N,_),_,X,W), W != ().

_error(M) :- M = @cat("more(cardinality): In preference element ",N," of preference statement ",P,", element '",X,"' is not allowed."),
             preference(P,more(cardinality)), 
             preference(P,(N,_),R,for(X),_), R != 1.


#program preference(more(weight)).

better(P) :- preference(P,more(weight)), required(P,better),
                #sum { -W,T : holds(X),  preference(P,_,_,for(X),(W,T)); 
                        W,T : holds'(X), preference(P,_,_,for(X),(W,T))}-1.

bettereq(P) :- preference(P,more(weight)), required(P,bettereq),
                  #sum { -W,T : holds(X),  preference(P,_,_,for(X),(W,T)); 
                          W,T : holds'(X), preference(P,_,_,for(X),(W,T))}0. 

eq(P) :- preference(P,more(weight)), required(P,eq),
         0 #sum { -W,T : holds(X),  preference(P,_,_,for(X),(W,T)); 
                   W,T : holds'(X), preference(P,_,_,for(X),(W,T))}0. 

worseeq(P) :- preference(P,more(weight)), required(P,worseeq),
              0 #sum { -W,T : holds(X),  preference(P,_,_,for(X),(W,T)); 
                        W,T : holds'(X), preference(P,_,_,for(X),(W,T))}.

worse(P) :- preference(P,more(weight)), required(P,worse),
            1 #sum { -W,T : holds(X),  preference(P,_,_,for(X),(W,T)); 
                      W,T : holds'(X), preference(P,_,_,for(X),(W,T))}.
                     
_error(M) :- M = @cat("more(weight): In preference element ",N," of preference statement ",P,", naming atom 'name(",X,")' is not allowed."), 
             preference(P,more(weight)), 
             preference(P,(N,_),_,name(X),_).

_error(M) :- M = @cat("more(weight): In preference element ",N," of preference statement ",P,", weight '",W,"' appearing in '",W,"::",X,"' should be a two terms tuple."),
             preference(P,more(weight)), 
             preference(P,(N,G),_,X,W), not ok(P,(N,G)).

ok(P,Q)   :- preference(P,more(weight)), 
             preference(P,Q,_,_,(A,B)).

_error(M) :- M = @cat("more(weight): In preference element ",N," of preference statement ",P,", element '",X,"' is not allowed."),
             preference(P,more(weight)), 
             preference(P,(N,_),R,for(X),_), R != 1.


#program preference(neg).

required(Q,worse) :- preference(P,neg), required(P,better), preference(P,_,_,name(Q),_).
better(P) :- preference(P,neg), required(P,better),
	            worse(Q), preference(P,_,_,name(Q),_).

required(P,better) :- preference(P,neg), required(P,bettereq). 
required(P,eq)        :- preference(P,neg), required(P,bettereq). 
bettereq(P) :- preference(P,neg), required(P,bettereq),
                  1 #sum { 1: better(P); 1: eq(P) }.

required(Q,eq) :- preference(P,neg), required(P,eq), preference(P,_,_,name(Q),_).
eq(P) :- preference(P,neg), required(P,eq),
	     eq(Q), preference(P,_,_,name(Q),_).

required(P,worse) :- preference(P,neg), required(P,worseeq). 
required(P,eq)    :- preference(P,neg), required(P,worseeq). 
worseeq(P) :- preference(P,neg), required(P,worseeq),
              1 #sum { 1: worse(P); 1: eq(P) }.

required(Q,better) :- preference(P,neg), required(P,worse), preference(P,_,_,name(Q),_).
worse(P) :- preference(P,neg), required(P,worse),
	        better(Q), preference(P,_,_,name(Q),_).

required(P,bettereq) :- preference(P,neg), required(P,unc). 
required(P,worseeq)     :- preference(P,neg), required(P,unc). 
unc(P) :- preference(P,neg); required(P,unc); 
          not bettereq(P); not worseeq(P).
      
%%% no formulas
_error(M) :- M = @cat("neg: In preference element ",N," of preference statement ",P,", only naming atoms are allowed."), 
             preference(P,neg), 
             preference(P,(N,_),_,for(X),_).

%%% no weights
_error(M) :- M = @cat("neg: In preference element ",N," of preference statement ",P,", weight '",W,"' appearing in '",W,"::",X,"' is not allowed."),
             preference(P,neg), 
             preference(P,(N,_),_,X,W), W != ().

%%% no orders or conditions
_error(M) :- M = @cat("neg: In preference element ",N," of preference statement ",P,", element '",X,"' is not allowed."),
             preference(P,neg), 
             preference(P,(N,_),R,for(X),_), R != 1.

%%% one element
_error(M) :- M = @cat("neg: In preference statement ",P,", only one preference element is allowed."),
             preference(P,neg), 
             preference(P,(N,_),_,for(X),_), N != 1.

#program preference(pareto).

required(Q,better)   :- preference(P,pareto), required(P,better), preference(P,_,_,name(Q),_).
required(Q,bettereq) :- preference(P,pareto), required(P,better), preference(P,_,_,name(Q),_).
better(P) :- preference(P,pareto), required(P,better),
	            bettereq(Q) : preference(P,_,_,name(Q),_);
                better(R);    preference(P,_,_,name(R),_).

required(Q,bettereq) :- preference(P,pareto), required(P,bettereq), preference(P,_,_,name(Q),_).
bettereq(P) :- preference(P,pareto), required(P,bettereq),
	              bettereq(Q) : preference(P,_,_,name(Q),_).

required(Q,eq) :- preference(P,pareto), required(P,eq), preference(P,_,_,name(Q),_).
eq(P) :- preference(P,pareto), required(P,eq),
	     eq(Q) : preference(P,_,_,name(Q),_).

required(Q,worseeq) :- preference(P,pareto), required(P,worseeq), preference(P,_,_,name(Q),_).
worseeq(P) :- preference(P,pareto), required(P,worseeq),
	          worseeq(Q) : preference(P,_,_,name(Q),_).

required(Q,worse)   :- preference(P,pareto), required(P,worse), preference(P,_,_,name(Q),_).
required(Q,worseeq) :- preference(P,pareto), required(P,worse), preference(P,_,_,name(Q),_).
worse(P) :- preference(P,pareto), required(P,worse),
	        worseeq(Q) : preference(P,_,_,name(Q),_);
            worse(R);    preference(P,_,_,name(R),_).

required(P,bettereq) :- preference(P,pareto), required(P,unc). 
required(P,worseeq)     :- preference(P,pareto), required(P,unc). 
unc(P) :- preference(P,pareto); required(P,unc); 
          not bettereq(P); not worseeq(P).

%%% no formulas
_error(M) :- M = @cat("pareto: In preference element ",N," of preference statement ",P,", only naming atoms are allowed."), 
             preference(P,pareto), 
             preference(P,(N,_),_,for(X),_).

%%% no weights
_error(M) :- M = @cat("pareto: In preference element ",N," of preference statement ",P,", weight '",W,"' appearing in '",W,"::",X,"' is not allowed."),
             preference(P,pareto), 
             preference(P,(N,_),_,X,W), W != ().

%%% no orders or conditions
_error(M) :- M = @cat("pareto: In preference element ",N," of preference statement ",P,", element '",X,"' is not allowed."),
             preference(P,pareto), 
             preference(P,(N,_),R,for(X),_), R != 1.

#program preference(poset).

%
% qualitative preferences
%

required(P)       :- preference(P,poset), required(P,_).
required(P,noteq) :- preference(P,poset), required(P,X), X != eq.

poset(P,X) :- preference(P,poset), required(P),
              preference(P,_,_,for(X),_).

poset(P,X,Y) :- preference(P,poset), required(P,noteq),
                preference(P,I,1,for(X),_), preference(P,I,2,for(Y),_).

% transitive closure
poset(P,X,Y) :- preference(P,poset), required(P,noteq),
                poset(P,X,Z), poset(P,Z,Y).

% better

better(P,X) :- preference(P,poset), required(P,better), 
               poset(P,X), holds(X), not holds'(X).

notbetter(P) :- preference(P,poset), required(P,better),
                poset(P,X), not holds(X), holds'(X),
                not better(P,Y) : poset(P,Y,X).

better(P) :- preference(P,poset), required(P,better),
             1 #sum { 1: better(P,X) }, not notbetter(P).

% bettereq
required(P,eq)        :- preference(P,poset), required(P,bettereq).
required(P,better)    :- preference(P,poset), required(P,bettereq).
bettereq(P)  :- preference(P,poset), required(P,bettereq),
                1 #sum { eq(P), better(P) }.

% eq
eq(P) :- preference(P,poset), required(P,eq),
         holds(X) : poset(P,X), holds'(X);
         not holds(X) : poset(P,X), not holds'(X).


% worseeq
required(P,eq)    :- preference(P,poset), required(P,worseeq).
required(P,worse) :- preference(P,poset), required(P,worseeq).
worseeq(P)  :- preference(P,poset), required(P,worseeq),
               1 #sum { eq(P), worse(P) }.


% worse
worse(P,X) :- preference(P,poset), required(P,worse),
              poset(P,X), holds'(X), not holds(X).

notworse(P) :- preference(P,poset), required(P,worse),
               poset(P,X), not holds'(X), holds(X),
		       not worse(P,Y) : poset(P,Y,X).

worse(P) :- preference(P,poset), required(P,worse),
            1 #sum { 1: worse(P,X) }, not notworse(P).

% unc
required(P,bettereq) :- preference(P,poset), required(P,unc).
required(P,worseeq)  :- preference(P,poset), required(P,unc).
unc(P) :- preference(P,poset), required(P,unc),
          not bettereq(P), not worseeq(P).

%%%
%%% _error/1
%%%

_error(M) :- M = @cat("poset: In preference element ",N," of preference statement ",P,", naming atom 'name(",X,")' is not allowed."), 
             preference(P,poset), 
             preference(P,(N,_),_,name(X),_).

_error(M) :-  M = @cat("poset: In preference element ",N," of preference statement ",P,", weight '",W,"' appearing in weighted boolean formula '",W,"::",X,"' is not allowed."),
              preference(P,poset), 
              preference(P,(N,_),_,X,W), W != ().

_error(M) :- M = @cat("poset: In preference element ",N," of preference statement ",P,", condition '",X,"' is not allowed."),
             preference(P,poset), 
             preference(P,(N,_),0,for(X),_).

_error(M) :- M = @cat("poset: In preference element ",N," of preference statement ",P,", element '",X,"' is not allowed."),
             preference(P,poset), 
             preference(P,(N,_),R,for(X),_), R > 2.


#program preference(subset).

better(P) :- preference(P,subset); required(P,better); 
                not holds(X) : preference(P,_,_,for(X),_), not holds'(X);
                1 #sum { 1 : not holds(X), holds'(X), preference(P,_,_,for(X),_)}.

bettereq(P) :- preference(P,subset); required(P,bettereq); 
                  not holds(X) : preference(P,_,_,for(X),_), not holds'(X).

required(P,bettereq) :- preference(P,subset); required(P,eq). 
required(P,worseeq)     :- preference(P,subset); required(P,eq). 
eq(P) :- preference(P,subset); required(P,eq); 
         bettereq(P); worseeq(P).

worseeq(P) :- preference(P,subset); required(P,worseeq); 
              holds(X) : preference(P,_,_,for(X),_), holds'(X).

worse(P) :- preference(P,subset); required(P,worse); 
            holds(X) : preference(P,_,_,for(X),_), holds'(X);
            1 #sum { 1 : holds(X), not holds'(X), preference(P,_,_,for(X),_)}.

required(P,bettereq) :- preference(P,subset); required(P,unc). 
required(P,worseeq)     :- preference(P,subset); required(P,unc). 
unc(P) :- preference(P,subset); required(P,unc); 
          not bettereq(P); not worseeq(P).

_error(M) :- M = @cat("subset: In preference element ",N," of preference statement ",P,", naming atom 'name(",X,")' is not allowed."), 
             preference(P,subset), 
             preference(P,(N,_),_,name(X),_).

_error(M) :- M = @cat("subset: In preference element ",N," of preference statement ",P,", weight '",W,"' appearing in weighted boolean formula '",W,"::",X,"' is not allowed."),
             preference(P,subset), 
             preference(P,(N,_),_,X,W), W != ().

_error(M) :- M = @cat("subset: In preference element ",N," of preference statement ",P,", element '",X,"' is not allowed."),
             preference(P,subset), 
             preference(P,(N,_),R,for(X),_), R != 1.




#program preference(superset).

better(P) :- preference(P,superset); required(P,better); 
                holds(X) : preference(P,_,_,for(X),_), holds'(X);
                1 #sum { 1 : holds(X), not holds'(X), preference(P,_,_,for(X),_)}.

bettereq(P) :- preference(P,superset); required(P,bettereq); 
                  holds(X) : preference(P,_,_,for(X),_), holds'(X).

required(P,bettereq) :- preference(P,superset); required(P,eq). 
required(P,worseeq)     :- preference(P,superset); required(P,eq). 
eq(P) :- preference(P,superset); required(P,eq); 
         bettereq(P); worseeq(P).

worseeq(P) :- preference(P,superset); required(P,worseeq); 
              not holds(X) : preference(P,_,_,for(X),_), not holds'(X).

worse(P) :- preference(P,superset); required(P,worse); 
            not holds(X) : preference(P,_,_,for(X),_), not holds'(X);
            1 #sum { 1 : not holds(X), holds'(X), preference(P,_,_,for(X),_)}.

required(P,bettereq) :- preference(P,superset); required(P,unc). 
required(P,worseeq)     :- preference(P,superset); required(P,unc). 
unc(P) :- preference(P,superset); required(P,unc); 
          not bettereq(P); not worseeq(P).

_error(M) :- M = @cat("superset: In preference element ",N," of preference statement ",P,", naming atom 'name(",X,")' is not allowed."), 
             preference(P,superset), 
             preference(P,(N,_),_,name(X),_).

_error(M) :- M = @cat("superset: In preference element ",N," of preference statement ",P,", weight '",W,"' appearing in weighted boolean formula '",W,"::",X,"' is not allowed."),
             preference(P,superset), 
             preference(P,(N,_),_,X,W), W != ().

_error(M) :- M = @cat("superset: In preference element ",N," of preference statement ",P,", element '",X,"' is not allowed."),
             preference(P,superset), 
             preference(P,(N,_),R,for(X),_), R != 1.


